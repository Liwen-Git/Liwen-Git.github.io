<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式</title>
      <link href="/2019/07/08/php-design-patterns/"/>
      <url>/2019/07/08/php-design-patterns/</url>
      
        <content type="html"><![CDATA[<h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>策略模式是对象的行为模式，用意是对一组算法的封装。动态的选择需要的算法并使用。</p><p>策略模式指的是程序中涉及决策控制的一种模式。策略模式功能非常强大，因为这个设计模式本身的核心思想就是面向对象编程的多形性思想。</p><p>策略模式的三个角色：</p><ol><li>抽象策略角色</li><li>具体策略角色</li><li>环境角色（对抽象策略角色的引用）</li></ol><p>实现步骤：</p><ol><li>定义抽象角色类（定义好各个实现的共同抽象方法）</li><li>定义具体策略类（具体实现父类的共同方法）</li><li>定义环境角色类（私有化申明抽象角色变量，重载构造方法，执行抽象方法）</li></ol><p>就在编程领域外，有许多例子是关于策略模式的。例如：</p><p>如果我需要在早晨从家里出发去上班，我可以有几个策略考虑：我可以乘坐地铁，乘坐公交车，走路或其它的途径。每个策略可以得到相同的结果，但是使用了不同的资源。</p><p>策略模式的代码实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 抽象策略类</span><br><span class="line">abstract class baseAgent &#123;</span><br><span class="line">            abstract function PrintPage();</span><br><span class="line">&#125;</span><br><span class="line">// 用于客户端是IE时调用的类（环境角色）</span><br><span class="line">class ieAgent extends baseAgent &#123;</span><br><span class="line">            function PrintPage() &#123;</span><br><span class="line">                return &apos;IE&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 用于客户端不是IE时调用的类（环境角色）</span><br><span class="line">class otherAgent extends baseAgent &#123;</span><br><span class="line">            function PrintPage() &#123;</span><br><span class="line">                return &apos;not IE&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 具体策略角色</span><br><span class="line">class Browser &#123;</span><br><span class="line">            public function call($object) &#123;</span><br><span class="line">                return $object-&gt;PrintPage();</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$bro = new Browser();</span><br><span class="line">echo $bro-&gt;call(new ieAgent());</span><br></pre></td></tr></table></figure><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>工厂模式是我们最常用的实例化对象模式，是用工厂方法代替new操作的一种模式。</p><p>使用工厂模式的好处是，如果你想要更改所实例化的类名等，则只需更改该工厂方法内容即可，不需逐一寻找代码中具体实例化的地方（new处）修改了。为系统结构提供灵活的动态扩展机制，减少了耦合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    // 简单工厂模式（静态工厂方法模式）</span><br><span class="line">    // Interface people 人类</span><br><span class="line">    interface people &#123;</span><br><span class="line">        public function say();</span><br><span class="line">    &#125;</span><br><span class="line">    // Class man 继承people的男人类</span><br><span class="line">    class man implements people</span><br><span class="line">    &#123;</span><br><span class="line">        // 具体实现people的say方法</span><br><span class="line">        public function say()</span><br><span class="line">        &#123;</span><br><span class="line">            echo &apos;我是男人&lt;br&gt;&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // Class women 继承people的女人类</span><br><span class="line">    class women implements people</span><br><span class="line">    &#123;</span><br><span class="line">        // 具体实现people的say方法</span><br><span class="line">        public function say()</span><br><span class="line">        &#123;</span><br><span class="line">            echo &apos;我是女人&lt;br&gt;&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // Class SimpleFactory 工厂类</span><br><span class="line">    class SimpleFactory &#123;</span><br><span class="line">        // 简单工厂里的静态方法-用于创建男人对象</span><br><span class="line">        static function createMan()</span><br><span class="line">        &#123;</span><br><span class="line">            return new man();</span><br><span class="line">        &#125;</span><br><span class="line">        // 简单工厂里的静态方法-用于创建女人对象</span><br><span class="line">        static function createWomen()</span><br><span class="line">        &#123;</span><br><span class="line">            return new women();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 具体调用</span><br><span class="line">    $man = SimpleFactoty::createMan();</span><br><span class="line">    $man-&gt;say();</span><br><span class="line">    $woman = SimpleFactoty::createWomen();</span><br><span class="line">    $woman-&gt;say();</span><br></pre></td></tr></table></figure><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p><p>单例模式是一种常见的设计模式，在计算机系统中，线程池、缓存、日志对象、对话框、打印机、数据库操作、显卡的驱动程序常被设计成单例。</p><p>单例模式分3种：懒汉式单例、饿汉式单例、登记式单例。</p><p>单例模式有以下3个特点：</p><ol><li>只能有一个实例</li><li>必须自行创建这个实例</li><li>必须给其他对象提供这一实例</li></ol><p>那么为什么要使用PHP单例模式？</p><p>PHP一个主要应用场合就是应用程序与数据库打交道的场景，在一个应用中会存在大量的数据库操作，针对数据库句柄连接数据库的行为，使用单例模式可以避免大量的new操作。因为每一次new操作都会消耗系统和内存的资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Single &#123;</span><br><span class="line">    private $name;//声明一个私有的实例变量</span><br><span class="line">    private function __construct()&#123;</span><br><span class="line">    //声明私有构造方法为了防止外部代码使用new来创建对象。</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static public $instance;//声明一个静态变量（保存在类中唯一的一个实例）</span><br><span class="line">    static public function getinstance()&#123;</span><br><span class="line">    //声明一个getinstance()静态方法，用于检测是否有实例对象</span><br><span class="line">        if(!self::$instance) &#123;</span><br><span class="line">            self::$instance = new self();</span><br><span class="line">        &#125; </span><br><span class="line">        return self::$instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public function setname($n)&#123; $this-&gt;name = $n; &#125;</span><br><span class="line">    public function getname()&#123; return $this-&gt;name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$oa = Single::getinstance();</span><br><span class="line">$ob = Single::getinstance();</span><br><span class="line">$oa-&gt;setname(&apos;hello world&apos;);</span><br><span class="line">$ob-&gt;setname(&apos;good morning&apos;);</span><br><span class="line">echo $oa-&gt;getname();//good morning</span><br><span class="line">echo $ob-&gt;getname();//good morning</span><br></pre></td></tr></table></figure><h4 id="注册模式"><a href="#注册模式" class="headerlink" title="注册模式"></a>注册模式</h4><p>注册模式，解决全局共享和交换对象。已经创建好的对象，挂在到某个全局可以使用的数组上，在需要使用的时候，直接从该数组上获取即可。将对象注册到全局的树上。任何地方直接去访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Register &#123;</span><br><span class="line">    protected static $objects;</span><br><span class="line">    //将对象注册到全局的树上</span><br><span class="line">    function set($alias, $object) &#123;</span><br><span class="line">        self::$objects[$alias]=$object;//将对象放到树上</span><br><span class="line">    &#125;</span><br><span class="line">    static function get($name) &#123;</span><br><span class="line">        return self::$objects[$name];//获取某个注册到树上的对象</span><br><span class="line">    &#125;</span><br><span class="line">    function _unset($alias) &#123;</span><br><span class="line">        unset(self::$objects[$alias]);//移除某个注册到树上的对象</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>将各种截然不同的函数接口封装成统一的API。</p><p>PHP中的数据库操作有MySQL,MySQLi,PDO三种，可以用适配器模式统一成一致，使不同的数据库操作，统一成一样的API。类似的场景还有cache适配器，可以将memcache,redis,file,apc等不同的缓存函数，统一成一致。 </p><p>首先定义一个接口(有几个方法，以及相应的参数)。然后，有几种不同的情况，就写几个类实现该接口。将完成相似功能的函数，统一成一致的方法。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">接口 IDatabase</span><br><span class="line">&lt;?php</span><br><span class="line">    namespace IMooc;</span><br><span class="line">    interface IDatabase &#123;</span><br><span class="line">        function connect($host, $user, $passwd, $dbname);</span><br><span class="line">        function query($sql);</span><br><span class="line">        function close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">MySQL</span><br><span class="line">&lt;?php</span><br><span class="line">    namespace IMooc\Database;</span><br><span class="line">    use IMooc\IDatabase;</span><br><span class="line">    class MySql implements IDatabase &#123;</span><br><span class="line">        protected $conn;</span><br><span class="line">        function connect($host, $user, $passwd, $dbname) &#123;</span><br><span class="line">            $conn = mysql_connect($host, $user, $passwd);</span><br><span class="line">            mysql_select_db($dbname);</span><br><span class="line">            $this-&gt;conn = $conn;</span><br><span class="line">        &#125;</span><br><span class="line">        function query($sql) &#123;</span><br><span class="line">            $res = mysql_query($sql, $this-&gt;conn);</span><br><span class="line">            return $res;</span><br><span class="line">        &#125;</span><br><span class="line">        function close() &#123;</span><br><span class="line">            mysql_close($this-&gt;conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MySQLi</span><br><span class="line">&lt;?php</span><br><span class="line">    namespace IMooc\Database;</span><br><span class="line">    use IMooc\IDatabase;</span><br><span class="line">    class MySQLi implements IDatabase&#123;</span><br><span class="line">        protected $conn;</span><br><span class="line">        function connect($host, $user, $passwd, $dbname)&#123;</span><br><span class="line">            $conn = mysqli_connect($host, $user, $passwd, $dbname);</span><br><span class="line">            $this-&gt;conn = $conn;</span><br><span class="line">        &#125;</span><br><span class="line">        function query($sql)&#123;</span><br><span class="line">            return mysqli_query($this-&gt;conn, $sql);</span><br><span class="line">        &#125;</span><br><span class="line">        function close()&#123;</span><br><span class="line">            mysqli_close($this-&gt;conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><ol><li>观察者模式(Observer)，当一个对象状态发生变化时，依赖它的对象全部会收到通知，并自动更新。  </li><li>场景:一个事件发生后，要执行一连串更新操作。传统的编程方式，就是在事件的代码之后直接加入处理的逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件的主体代码。 </li><li>观察者模式实现了低耦合，非侵入式的通知与更新机制。 </li></ol><p>定义一个事件触发抽象类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">EventGenerator.php</span><br><span class="line">&lt;?php</span><br><span class="line">    abstract class EventGenerator&#123;</span><br><span class="line">        private $observers = array();</span><br><span class="line">        function addObserver(Observer $observer)&#123;</span><br><span class="line">            $this-&gt;observers[]=$observer;</span><br><span class="line">        &#125;</span><br><span class="line">        function notify()&#123;</span><br><span class="line">            foreach ($this-&gt;observers as $observer)&#123;</span><br><span class="line">                $observer-&gt;update();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>定义一个观察者接口 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observer.php</span><br><span class="line">&lt;?php</span><br><span class="line">//一个实现了EventGenerator抽象类的类，用于具体定义某个发生的事件</span><br><span class="line">interface Observer &#123;</span><br><span class="line">            function update(); // 这里就是在事件发生后要执行的逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Event extends EventGenerator&#123;</span><br><span class="line">    function triger()&#123;</span><br><span class="line">        echo &quot;Event&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Observer1 implements Observer&#123;</span><br><span class="line">    function update()&#123;</span><br><span class="line">        echo &quot;逻辑1 &lt;br/&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Observer2 implements Observer&#123;</span><br><span class="line">    function update()&#123;</span><br><span class="line">        echo &quot;逻辑2 &lt;br/&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$event = new Event();</span><br><span class="line">$event-&gt;addObserver(new Observer1());</span><br><span class="line">$event-&gt;addObserver(new Observer2());</span><br><span class="line">$event-&gt;triger();</span><br><span class="line">$event-&gt;notify();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fmt格式 “占位符”</title>
      <link href="/2019/07/08/go-fmt/"/>
      <url>/2019/07/08/go-fmt/</url>
      
        <content type="html"><![CDATA[<p>golang 的fmt 包实现了格式化I/O函数，类似于C的 printf 和 scanf。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 定义示例类型和变量</span><br><span class="line">type Human struct &#123;</span><br><span class="line">    Name string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var people = Human&#123;Name: &quot;zhangsan&quot;&#125;</span><br></pre></td></tr></table></figure><ul><li>普通占位符</li></ul><table><thead><tr><th>占位符</th><th>说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td>%v</td><td>相应值的默认格式</td><td>Printf(“%v”, people)</td><td>{zhangsan}</td></tr><tr><td>%+v</td><td>打印结构体时，会添加字段名</td><td>Printf(“%+v”, people)</td><td>{Name:zhangsan}</td></tr><tr><td>%#v</td><td>相应值的Go语法表示</td><td>Printf(“#v”, people)</td><td>main.Human{Name:”zhangsan”}</td></tr><tr><td>%T</td><td>相应值的类型的Go语法表示</td><td>Printf(“%T”, people)</td><td>main.Human</td></tr><tr><td>%%</td><td>字面上的百分号，并非值的占位符</td><td>Printf(“%%”)</td><td>%</td></tr></tbody></table><ul><li>布尔占位符</li></ul><table><thead><tr><th>占位符</th><th>说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td>%t</td><td>true 或 false</td><td>Printf(“%t”, true)</td><td>true</td></tr></tbody></table><ul><li>整数占位符</li></ul><table><thead><tr><th>占位符</th><th>说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td>%b</td><td>二进制表示</td><td>Printf(“%b”, 5)</td><td>101</td></tr><tr><td>%c</td><td>相应Unicode码点所表示的字符</td><td>Printf(“%c”, 0x4E2D)</td><td>中</td></tr><tr><td>%d</td><td>十进制表示</td><td>Printf(“%d”, 0x12)</td><td>18</td></tr><tr><td>%o</td><td>八进制表示</td><td>Printf(“%d”, 10)</td><td>12</td></tr><tr><td>%q</td><td>单引号围绕的字符字面值，由Go语法安全地转义</td><td>Printf(“%q”, 0x4E2D)</td><td>‘中’</td></tr><tr><td>%x</td><td>十六进制表示，字母形式为小写 a-f</td><td>Printf(“%x”, 13)</td><td>d</td></tr><tr><td>%X</td><td>十六进制表示，字母形式为大写 A-F</td><td>Printf(“%x”, 13)</td><td>D</td></tr><tr><td>%U</td><td>Unicode格式：U+1234，等同于 “U+%04X”</td><td>Printf(“%U”, 0x4E2D)</td><td>U+4E2D</td></tr></tbody></table><ul><li>浮点数和复数的组成部分（实部和虚部）</li></ul><table><thead><tr><th>占位符</th><th>说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td>%e</td><td>科学计数法，例如 -1234.456e+78</td><td>Printf(“%e”, 10.2)</td><td>1.020000e+01</td></tr><tr><td>%E</td><td>科学计数法，例如 -1234.456E+78</td><td>Printf(“%e”, 10.2)</td><td>1.020000E+01</td></tr><tr><td>%f</td><td>有小数点而无指数，例如 123.456</td><td>Printf(“%f”, 10.2)</td><td>10.200000</td></tr><tr><td>%g</td><td>根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出</td><td>Printf(“%g”, 10.20)</td><td>10.2</td></tr><tr><td>%G</td><td>根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出</td><td>Printf(“%G”, 10.20+2i)</td><td>(10.2+2i)</td></tr></tbody></table><ul><li>字符串与字节切片</li></ul><table><thead><tr><th>占位符</th><th>说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td>%s</td><td>输出字符串表示（string类型或[]byte)</td><td>Printf(“%s”, []byte(“Go语言”))</td><td>Go语言</td></tr><tr><td>%q</td><td>双引号围绕的字符串，由Go语法安全地转义</td><td>Printf(“%q”, “Go语言”)</td><td>“Go语言”</td></tr><tr><td>%x</td><td>十六进制，小写字母，每字节两个字符</td><td>Printf(“%x”, “golang”)</td><td>676f6c616e67</td></tr><tr><td>%X</td><td>十六进制，大写字母，每字节两个字符</td><td>Printf(“%X”, “golang”)</td><td>676F6C616E67</td></tr></tbody></table><ul><li>指针</li></ul><table><thead><tr><th>占位符</th><th>说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td>%p</td><td>十六进制表示，前缀 0x</td><td>Printf(“%p”, &amp;people)</td><td>0x4f57f0</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 占位符 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
